#include <stdio.h>
#include <stdlib.h>

struct TreeNode {
    int val;
    struct TreeNode* left;
    struct TreeNode* right;
};

struct TreeNode* createNode(int val) {
    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    newNode->val = val;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

struct TreeNode* buildTree() {
    struct TreeNode* root = createNode(41);

    root->left = createNode(1);
    root->right = createNode(71);

    root->left->left = createNode(0);
    root->left->right = createNode(38);

    root->left->right->left = createNode(36);
    root->left->right->right = createNode(40);

    root->left->right->left->left = createNode(10);
    root->left->right->left->right = createNode(37);

    root->right->left = createNode(44);
    root->right->right = createNode(76);

    root->right->left->left = createNode(43);
    root->right->left->right = createNode(51);

    root->right->left->right->left = createNode(50);
    root->right->left->right->right = createNode(57);

    root->right->right->left = createNode(73);
    root->right->right->right = createNode(83);

    root->right->right->left->left = createNode(72);

    root->right->right->right->left = createNode(80);
    root->right->right->right->right = createNode(97);

    return root;
}

void inOrderTraversal(struct TreeNode* node) {
    if (node == NULL) {
        return;
    }

    inOrderTraversal(node->left);
    printf("%d ", node->val);
    inOrderTraversal(node->right);
}

int main() {
    struct TreeNode* root = buildTree();

    printf("In-Order Traversal:\n");
    inOrderTraversal(root);
    printf("\n");

    return 0;
}
